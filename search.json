[{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Compare with Tidyr's Rectangling","text":"per tidyr definition unnesting (rectangling): tidyr core functions unnesting unnest_longer(), unnest_wider(), hoist(). guide follows steps tidyr vignette translates unnest’s language. tidyr unnest lists several steps using one three core functions. unnest one step. unnest doesn’t produce intermediate list columns. ’ll use repurrrsive package source nested lists:","code":"... is the art and craft of taking a deeply nested list (often sourced  from wild caught JSON or XML) and taming it into a tidy data set of rows and  columns. There are three functions from tidyr that are particularly useful for  rectangling: library(tidyr) library(dplyr) library(repurrrsive) library(unnest) options(unnest.return.type = \"tibble\")"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"github-repos","dir":"Articles","previous_headings":"","what":"GitHub repos","title":"Compare with Tidyr's Rectangling","text":"tidyr start putting list data.frame column. unnest necessary. gh_repos nested list maximal depth 4 “user”>“repo”>“owner”>“[xyz]”. Let’s say want data.frame 3 columns, “name”, “homepage” “watchers_count”, level 3 repo characteristics one,“login”, level 4 owner characteristics. ’s done tidyr: unnest: unnest selectors (s()) apply corresponding levels hierarchy describe elements selected . stack = TRUE says result extraction stacked row-wise (aka rbinded). stack = FALSE, means spread across multiple columns (aka cbinded). argument provides name output. default ’s entire path name selected leaf. Now assume want 3 components “repos” components owner : unnest Note unnest produces namespaced column names, [tidyr’[s . good thing don’t worry conflicting names. tidyr provides “fix” duplicated names form names_repair argument functions.","code":"str(gh_repos[[1]][[1]][[\"owner\"]]) repos <- tibble(repo = gh_repos) repos <- unnest_longer(repos, repo) hoist(repos, repo,       login = c(\"owner\", \"login\"),       name = \"name\",       homepage = \"homepage\",       watchers = \"watchers_count\") %>%   select(-repo) #> # A tibble: 176 × 4 #>    login       name        homepage watchers #>    <chr>       <chr>       <chr>       <int> #>  1 gaborcsardi after       NA              5 #>  2 gaborcsardi argufy      NA             19 #>  3 gaborcsardi ask         NA              5 #>  4 gaborcsardi baseimports NA              0 #>  5 gaborcsardi citest      NA              0 #>  6 gaborcsardi clisymbols  \"\"             18 #>  7 gaborcsardi cmaker      NA              0 #>  8 gaborcsardi cmark       NA              0 #>  9 gaborcsardi conditions  NA              0 #> 10 gaborcsardi crayon      NA             52 #> # ℹ 166 more rows spec <- s(stack = TRUE,           s(stack = TRUE,             s(\"name\"),             s(\"homepage\"),             s(\"watchers_count\", as = \"watchers\"),             s(\"owner\",               s(\"login\")))) unnest(gh_repos, spec) #> # A tibble: 176 × 4 #>    homepage name        owner.login watchers #>    <chr>    <chr>       <chr>          <int> #>  1 NA       after       gaborcsardi        5 #>  2 NA       argufy      gaborcsardi       19 #>  3 NA       ask         gaborcsardi        5 #>  4 NA       baseimports gaborcsardi        0 #>  5 NA       citest      gaborcsardi        0 #>  6 \"\"       clisymbols  gaborcsardi       18 #>  7 NA       cmaker      gaborcsardi        0 #>  8 NA       cmark       gaborcsardi        0 #>  9 NA       conditions  gaborcsardi        0 #> 10 NA       crayon      gaborcsardi       52 #> # ℹ 166 more rows tibble(repo = gh_repos) %>%   unnest_longer(repo) %>%   hoist(repo,         name = \"name\",         homepage = \"homepage\",         watchers = \"watchers_count\") %>%   hoist(repo, owner = \"owner\") %>%   unnest_wider(owner) spec <- s(stack = TRUE,           s(stack = TRUE,             s(\"name\"),             s(\"homepage\"),             s(\"watchers_count\", as = \"watchers\"),             s(\"owner\"))) unnest(gh_repos, spec) %>% tibble() #> # A tibble: 176 × 20 #>    homepage name        owner.avatar_url    owner.events_url owner.followers_url #>    <chr>    <chr>       <chr>               <chr>            <chr>               #>  1 NA       after       https://avatars.gi… https://api.git… https://api.github… #>  2 NA       argufy      https://avatars.gi… https://api.git… https://api.github… #>  3 NA       ask         https://avatars.gi… https://api.git… https://api.github… #>  4 NA       baseimports https://avatars.gi… https://api.git… https://api.github… #>  5 NA       citest      https://avatars.gi… https://api.git… https://api.github… #>  6 \"\"       clisymbols  https://avatars.gi… https://api.git… https://api.github… #>  7 NA       cmaker      https://avatars.gi… https://api.git… https://api.github… #>  8 NA       cmark       https://avatars.gi… https://api.git… https://api.github… #>  9 NA       conditions  https://avatars.gi… https://api.git… https://api.github… #> 10 NA       crayon      https://avatars.gi… https://api.git… https://api.github… #> # ℹ 166 more rows #> # ℹ 15 more variables: owner.following_url <chr>, owner.gists_url <chr>, #> #   owner.gravatar_id <chr>, owner.html_url <chr>, owner.id <int>, #> #   owner.login <chr>, owner.organizations_url <chr>, #> #   owner.received_events_url <chr>, owner.repos_url <chr>, #> #   owner.site_admin <lgl>, owner.starred_url <chr>, #> #   owner.subscriptions_url <chr>, owner.type <chr>, owner.url <chr>, …"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"game-of-thrones-characters","dir":"Articles","previous_headings":"","what":"Game of Thrones characters","title":"Compare with Tidyr's Rectangling","text":"non-singleton leafs? normally stacked, spread melted depending analysis. example Game Thrones dataset contains non-singleton leafs “titles”, “aliases”, “books” etc. Let’s look common scenarios.","code":"str(got_chars[[1]])"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"stacking","dir":"Articles","previous_headings":"Game of Thrones characters","what":"Stacking","title":"Compare with Tidyr's Rectangling","text":"Assume want row every book TV series character appears . , want long table combinations (aka cross product) books TV series. Implementation aside, [tidyr’[s intermediary steps generally costly two reasons. First, intermediary data.frames created processing. Second, intermediary objects might contain columns needed subsequent processing. examples unnest_wider() produced man columns need. better approach replace bit verbose hoist call. contrast unnest doesn’t produce intermediary data structures. fact, unnest follows 0-intermediary-copy semantics. input vectors directly copied output, matter complex nesting . Cross-product commonly useful one non-singleton variable extracted. example, let’s match title name:","code":"tibble(char = got_chars) %>%   unnest_wider(char) %>%   select(name, books, tvSeries) %>%   unnest_longer(books) %>%   unnest_longer(tvSeries) #> # A tibble: 230 × 3 #>    name          books             tvSeries #>    <chr>         <chr>             <chr>    #>  1 Theon Greyjoy A Game of Thrones Season 1 #>  2 Theon Greyjoy A Game of Thrones Season 2 #>  3 Theon Greyjoy A Game of Thrones Season 3 #>  4 Theon Greyjoy A Game of Thrones Season 4 #>  5 Theon Greyjoy A Game of Thrones Season 5 #>  6 Theon Greyjoy A Game of Thrones Season 6 #>  7 Theon Greyjoy A Storm of Swords Season 1 #>  8 Theon Greyjoy A Storm of Swords Season 2 #>  9 Theon Greyjoy A Storm of Swords Season 3 #> 10 Theon Greyjoy A Storm of Swords Season 4 #> # ℹ 220 more rows  unnest(got_chars,        s(stack = T,          s(\"name\"),          s(\"books,tvSeries/\", stack = T))) #> # A tibble: 236 × 3 #>    books             name          tvSeries #>    <chr>             <chr>         <chr>    #>  1 A Game of Thrones Theon Greyjoy Season 1 #>  2 A Storm of Swords Theon Greyjoy Season 2 #>  3 A Feast for Crows Theon Greyjoy Season 3 #>  4 A Game of Thrones Theon Greyjoy Season 4 #>  5 A Storm of Swords Theon Greyjoy Season 5 #>  6 A Feast for Crows Theon Greyjoy Season 6 #>  7 A Game of Thrones Theon Greyjoy Season 1 #>  8 A Storm of Swords Theon Greyjoy Season 2 #>  9 A Feast for Crows Theon Greyjoy Season 3 #> 10 A Game of Thrones Theon Greyjoy Season 4 #> # ℹ 226 more rows tibble(char = got_chars) %>%   hoist(char, name = \"name\", title = \"titles\") %>%   select(-char) %>%   unnest_longer(title) #> # A tibble: 59 × 2 #>    name              title                                                  #>    <chr>             <chr>                                                  #>  1 Theon Greyjoy     \"Prince of Winterfell\"                                 #>  2 Theon Greyjoy     \"Lord of the Iron Islands (by law of the green lands)\" #>  3 Tyrion Lannister  \"Acting Hand of the King (former)\"                     #>  4 Tyrion Lannister  \"Master of Coin (former)\"                              #>  5 Victarion Greyjoy \"Lord Captain of the Iron Fleet\"                       #>  6 Victarion Greyjoy \"Master of the Iron Victory\"                           #>  7 Will              \"\"                                                     #>  8 Areo Hotah        \"Captain of the Guard at Sunspear\"                     #>  9 Chett             \"\"                                                     #> 10 Cressen           \"Maester\"                                              #> # ℹ 49 more rows  unnest(got_chars,        s(stack = T,          s(\"name\"),          s(\"titles/\", stack = T))) #> # A tibble: 59 × 2 #>    name              titles                                                 #>    <chr>             <chr>                                                  #>  1 Theon Greyjoy     \"Prince of Winterfell\"                                 #>  2 Theon Greyjoy     \"Lord of the Iron Islands (by law of the green lands)\" #>  3 Tyrion Lannister  \"Acting Hand of the King (former)\"                     #>  4 Tyrion Lannister  \"Master of Coin (former)\"                              #>  5 Victarion Greyjoy \"Lord Captain of the Iron Fleet\"                       #>  6 Victarion Greyjoy \"Master of the Iron Victory\"                           #>  7 Will              \"\"                                                     #>  8 Areo Hotah        \"Captain of the Guard at Sunspear\"                     #>  9 Chett             \"\"                                                     #> 10 Cressen           \"Maester\"                                              #> # ℹ 49 more rows"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"id-value-long-tables-aka-long-pivoting-or-melting","dir":"Articles","previous_headings":"Game of Thrones characters","what":"Id-value long tables (aka long pivoting, or melting)","title":"Compare with Tidyr's Rectangling","text":"common scenario stack non-scalar leafs replicate id labels separate “key” column. called “melting” (reshape2) “long pivoting” (tidyr).","code":"tibble(char = got_chars) %>%   unnest_wider(char) %>%   select(name, books, tvSeries) %>%   pivot_longer(c(books, tvSeries), names_to = \"media\", values_to = \"value\") %>%   unnest_longer(value)  unnest(got_chars,        s(stack = T,          s(\"name\"),          s(\"books,tvSeries\", stack = \"media\", as = \"value\",            s(stack = T))))"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"id-value-wide-tables","dir":"Articles","previous_headings":"Game of Thrones characters","what":"Id-value wide tables","title":"Compare with Tidyr's Rectangling","text":"One might want stack id vars (media) spread measures (books, tvSeries) horizontally row contain measurement media.","code":"# There seem not to be an easy way to achieve this with tidyr  unnest(got_chars,        s(stack = T,          s(\"name\"),          s(\"books,tvSeries\", stack = \"media\", as = \"value\")))"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"wide-tables-aka-spreading","dir":"Articles","previous_headings":"Game of Thrones characters","what":"Wide Tables (aka spreading)","title":"Compare with Tidyr's Rectangling","text":"strategy commonly used machine learning scenarios large sparse tables plugged black-box ML algorithms. default behavior unnest.","code":"# Currently tidyr errors on double widening due to name conflicts. # tibble(char = got_chars) %>% #   unnest_wider(char) %>% #   select(name, books, tvSeries) %>% #   unnest_wider(books) %>% #   unnest_wider(tvSeries)  unnest(got_chars, s(stack = T, s(\"name, books, tvSeries\")))"},{"path":"https://vspinu.github.io/unnest/articles/tidyr.html","id":"sharla-gelfands-discography","dir":"Articles","previous_headings":"","what":"Sharla Gelfand’s discography","title":"Compare with Tidyr's Rectangling","text":"Finally, complex transformation [tidyr’[s vignette can achieved unnest single step. Typical entry disog collection looks like want extract artists metadata formats separate tables. unnest can achieve two separate passes list, single pass grouped children specification. single pass extraction returns list data.frames, scans data . Separate unnest calls: Single unnest pass: unnest specs inside groups separate-calls case. groups argument just like children argument difference output extraction cross-joined, simply returned list.1 benefit grouped extraction twofold. First, ’s faster list traversed . Second, de-duplication works across groups. , dedupe = TRUE (shown examples), fields extracted preceding specs extracted specs follow.","code":"str(discog[[3]]) #> List of 5 #>  $ instance_id      : int 354091476 #>  $ date_added       : chr \"2019-02-13T14:07:23-08:00\" #>  $ basic_information:List of 11 #>   ..$ labels      :List of 1 #>   .. ..$ :List of 6 #>   .. .. ..$ name            : chr \"La Vida Es Un Mus\" #>   .. .. ..$ entity_type     : chr \"1\" #>   .. .. ..$ catno           : chr \"MUS118\" #>   .. .. ..$ resource_url    : chr \"https://api.discogs.com/labels/38322\" #>   .. .. ..$ id              : int 38322 #>   .. .. ..$ entity_type_name: chr \"Label\" #>   ..$ year        : int 2017 #>   ..$ master_url  : chr \"https://api.discogs.com/masters/1109943\" #>   ..$ artists     :List of 1 #>   .. ..$ :List of 7 #>   .. .. ..$ join        : chr \"\" #>   .. .. ..$ name        : chr \"S.H.I.T. (3)\" #>   .. .. ..$ anv         : chr \"\" #>   .. .. ..$ tracks      : chr \"\" #>   .. .. ..$ role        : chr \"\" #>   .. .. ..$ resource_url: chr \"https://api.discogs.com/artists/2769828\" #>   .. .. ..$ id          : int 2769828 #>   ..$ id          : int 9827276 #>   ..$ thumb       : chr \"https://img.discogs.com/x6GUri3hXAcfzF2wz5jQloomOoY=/fit-in/150x150/filters:strip_icc():format(jpeg):mode_rgb()\"| __truncated__ #>   ..$ title       : chr \"I\" #>   ..$ formats     :List of 1 #>   .. ..$ :List of 3 #>   .. .. ..$ descriptions:List of 3 #>   .. .. .. ..$ : chr \"7\\\"\" #>   .. .. .. ..$ : chr \"45 RPM\" #>   .. .. .. ..$ : chr \"EP\" #>   .. .. ..$ name        : chr \"Vinyl\" #>   .. .. ..$ qty         : chr \"1\" #>   ..$ cover_image : chr \"https://img.discogs.com/7aJPlo2phtFL-T2Kt6MTBc0uftY=/fit-in/600x600/filters:strip_icc():format(jpeg):mode_rgb()\"| __truncated__ #>   ..$ resource_url: chr \"https://api.discogs.com/releases/9827276\" #>   ..$ master_id   : int 1109943 #>  $ id               : int 9827276 #>  $ rating           : int 0 tibble(disc = discog) %>%   unnest_wider(disc) %>%   hoist(basic_information, artist = \"artists\") %>%   select(disc_id = id, artist) %>%   unnest_longer(artist) %>%   unnest_wider(artist) #> # A tibble: 167 × 8 #>     disc_id join  name                    anv   tracks role  resource_url     id #>       <int> <chr> <chr>                   <chr> <chr>  <chr> <chr>         <int> #>  1  7496378 \"\"    Mollot                  \"\"    \"\"     \"\"    https://api… 4.62e6 #>  2  4490852 \"\"    Una Bèstia Incontrolab… \"\"    \"\"     \"\"    https://api… 3.19e6 #>  3  9827276 \"\"    S.H.I.T. (3)            \"\"    \"\"     \"\"    https://api… 2.77e6 #>  4  9769203 \"\"    Rata Negra              \"\"    \"\"     \"\"    https://api… 4.28e6 #>  5  7237138 \"\"    Ivy (18)                \"\"    \"\"     \"\"    https://api… 3.60e6 #>  6 13117042 \"\"    Tashme                  \"\"    \"\"     \"\"    https://api… 5.21e6 #>  7  7113575 \"\"    Desgraciados            \"\"    \"\"     \"\"    https://api… 4.45e6 #>  8 10540713 \"\"    Phantom Head            \"\"    \"\"     \"\"    https://api… 4.27e6 #>  9 11260950 \"\"    Sub Space (2)           \"\"    \"\"     \"\"    https://api… 5.69e6 #> 10 11726853 \"\"    Small Man (2)           \"\"    \"\"     \"\"    https://api… 6.37e6 #> # ℹ 157 more rows  tibble(disc = discog) %>%   unnest_wider(disc) %>%   hoist(basic_information, format = \"formats\") %>%   select(disc_id = id, format) %>%   unnest_longer(format) %>%   unnest_wider(format) %>%   unnest_longer(descriptions) #> # A tibble: 258 × 5 #>     disc_id descriptions text  name     qty   #>       <int> <chr>        <chr> <chr>    <chr> #>  1  7496378 \"Numbered\"   Black Cassette 1     #>  2  4490852 \"LP\"         NA    Vinyl    1     #>  3  9827276 \"7\\\"\"        NA    Vinyl    1     #>  4  9827276 \"45 RPM\"     NA    Vinyl    1     #>  5  9827276 \"EP\"         NA    Vinyl    1     #>  6  9769203 \"LP\"         NA    Vinyl    1     #>  7  9769203 \"Album\"      NA    Vinyl    1     #>  8  7237138 \"7\\\"\"        NA    Vinyl    1     #>  9  7237138 \"45 RPM\"     NA    Vinyl    1     #> 10 13117042 \"7\\\"\"        NA    Vinyl    1     #> # ℹ 248 more rows unnest(discog,        s(stack = T,          s(\"id\", as = \"disc_id\"),          s(\"basic_information/artists\", as = \"artist\",            s(stack = T))))  unnest(discog,        s(stack = T,          s(\"id\", as = \"disc_id\"),          s(\"basic_information/formats\", as = \"format\",            s(stack = T,              s(exclude = \"descriptions\"),              s(\"descriptions/\", stack = T))))) unnest(discog,        s(stack = T,          groups =            list(artists =                   list(s(\"id\", as = \"disc_id\"),                        s(\"basic_information/artists\", as = \"artist\",                          s(stack = T))),                 formats =                   list(s(\"id\", as = \"disc_id\"),                        s(\"basic_information/formats\", as = \"format\",                          s(stack = T,                            s(exclude = \"descriptions\"),                            s(\"descriptions/\", stack = T)))))))"},{"path":"https://vspinu.github.io/unnest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vitalie Spinu. Author, maintainer.","code":""},{"path":"https://vspinu.github.io/unnest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Spinu V (2025). unnest: Unnest Hierarchical Data Structures. R package version 0.0.7.9000, https://vspinu.github.io/unnest/, https://github.com/vspinu/unnest/.","code":"@Manual{,   title = {unnest: Unnest Hierarchical Data Structures},   author = {Vitalie Spinu},   year = {2025},   note = {R package version 0.0.7.9000, https://vspinu.github.io/unnest/},   url = {https://github.com/vspinu/unnest/}, }"},{"path":"https://vspinu.github.io/unnest/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Unnest Hierarchical Data Structures","text":"unnest zero-dependency R package fast single-copy single-pass unnesting hierarchical data structures. unnest(..) function takes nested list input (JSON, XML etc.) produces data.frame according unnesting spec.","code":""},{"path":"https://vspinu.github.io/unnest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unnest Hierarchical Data Structures","text":"","code":"install.packages(\"unnest\") # or devtools::install_github(\"vspinu/unnest\")"},{"path":"https://vspinu.github.io/unnest/reference/spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest spec — spec","title":"Unnest spec — spec","text":"Unnest spec nested list structure nested json. specifies deeply nested lists unnested. spec() handy constructor spec lists. s() shorthand alias spec().","code":""},{"path":"https://vspinu.github.io/unnest/reference/spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest spec — spec","text":"","code":"spec(   selector = NULL,   ...,   as = NULL,   children = NULL,   groups = NULL,   include = NULL,   exclude = NULL,   stack = NULL,   process = NULL,   default = NULL )  s(   selector = NULL,   ...,   as = NULL,   children = NULL,   groups = NULL,   include = NULL,   exclude = NULL,   stack = NULL,   process = NULL,   default = NULL )"},{"path":"https://vspinu.github.io/unnest/reference/spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest spec — spec","text":"selector shorthand syntax include parameter. Can list character vector. selector list character vector length greater 1, element include parameter corresponding level. example s(c(\"\", \"b\"), ...) equivalent s(include = \"\", s(include = \"b\", ...)) selector character length 1 contains \"/\" characters split \"/\" first. instance s(c(\"\", \"b\"), ...), s(\"/b\", ...) s(\"\", s(\"b\", ...)) equivalent canonical s(include = \"\", s(include = \"b\", ...)). Components consisting entirely digits converted integers. example s(\"/2/b\" ...) equivalent s(\"\", s(2, s(\"b\", ...))) Multiple include fields can separated ,. example s(\"/b,c/d\") equivalent s(\"\", s(include = c(\"b\", \"c\"), s(\"d\", ...))) name field extracted data.frame children, ... Unnamed list children spec. ... merged children. children part canonical spec. groups Named list specs processed parallel. return value named list unnested data.frames. results spec unnested separately except dedupe parameter unnest() work across groups execution faster nested list traversed regardless number groups. include, exclude list, numeric vector character vector specifying components include exclude. list can combine numeric indexes character elements extract. stack Whether stack node (TRUE) spread (FALSE). stack string index column created name. process Extra processing step element. Either NULL processing (default), \"as_is\" return entire element list column, \"paste\" paste elements together character column. default Default value insert include specification matched.","code":""},{"path":"https://vspinu.github.io/unnest/reference/spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest spec — spec","text":"s(): canonical spec - list consumed C++ unnesting routines.","code":""},{"path":"https://vspinu.github.io/unnest/reference/spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest spec — spec","text":"","code":"s(\"a\") #> <unnest.spec> #>  $ include:\"a\" s(\"a//c2\") #> <unnest.spec> #>  $ include :\"a\" #>  $ children:List of 1 #>   ..$ :<unnest.spec> #>   .. ..$ children:List of 1 #>   .. .. ..$ :<unnest.spec> #>   .. .. .. ..$ include:\"c2\" s(\"a/2/c2,cid\") #> <unnest.spec> #>  $ include :\"a\" #>  $ children:List of 1 #>   ..$ :<unnest.spec> #>   .. ..$ include :2 #>   .. ..$ children:List of 1 #>   .. .. ..$ :<unnest.spec> #>   .. .. .. ..$ include:\"c2\" \"cid\""},{"path":"https://vspinu.github.io/unnest/reference/unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest lists — unnest","title":"Unnest lists — unnest","text":"Unnest nested lists flat data.frames.","code":""},{"path":"https://vspinu.github.io/unnest/reference/unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest lists — unnest","text":"","code":"unnest(   x,   spec = NULL,   dedupe = FALSE,   stack_atomic = NULL,   process_atomic = NULL,   process_unnamed_lists = NULL,   cross_join = TRUE )"},{"path":"https://vspinu.github.io/unnest/reference/unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest lists — unnest","text":"x nested list unnest spec spec use unnesting. See spec(). dedupe whether dedupe repeated elements. TRUE, node visited second time explicitly declared spec node skipped. particularly useful grouped specs. stack_atomic Whether atomic leaf vectors stacked . NULL, default, data.frame vectors stacked, others spread. process_atomic Process spec atomic leaf vectors. Either NULL processing (default), \"as_is\" return entire element list column, \"paste\" paste elements together character column. process_unnamed_lists process unnamed lists. Can one \"as_is\" - return list column, \"exclude\" - drop elements unless explicitly included spec, \"paste\" - return character column, \"stack\" - automatically stack. NULL (default), nothing - process normally according specs. cross_join Specifies results sibling nodes joined (cbinded) together. shorter data.frames (fewer rows) can either recycled max number rows across joined components cross_join = FALSE. , results cross joined (produce combinations rows across components) cross_join = TRUE. cross_join = TRUE default data loss conducive earlier error detection incorrect specs","code":""},{"path":"https://vspinu.github.io/unnest/reference/unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest lists — unnest","text":"data.frame, data.table tibble specified option unnest.return.type. Defaults data.frame.","code":""},{"path":"https://vspinu.github.io/unnest/reference/unnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest lists — unnest","text":"","code":"x <- list(a = list(b = list(x = 1, y = 1:2, z = 10),                    c = list(x = 2, y = 100:102))) xxx <- list(x, x, x)  ## spreading unnest(x, s(\"a\")) #>   a.b.x a.b.y a.b.y.2 a.b.z a.c.x a.c.y a.c.y.2 a.c.y.3 #> 1     1     1       2    10     2   100     101     102 unnest(x, s(\"a\"), stack_atomic = TRUE) #>   a.b.x a.b.y a.b.z a.c.x a.c.y #> 1     1     1    10     2   100 #> 2     1     2    10     2   101 #> 3     1     1    10     2   102 #> 4     1     2    10     2   100 #> 5     1     1    10     2   101 #> 6     1     2    10     2   102 unnest(x, s(\"a/b\"), stack_atomic = TRUE) #>   a.b.x a.b.y a.b.z #> 1     1     1    10 #> 2     1     2    10 unnest(x, s(\"a/c\"), stack_atomic = TRUE) #>   a.c.x a.c.y #> 1     2   100 #> 2     2   101 #> 3     2   102 unnest(x, s(\"a\"), stack_atomic = TRUE, cross_join = TRUE) #>   a.b.x a.b.y a.b.z a.c.x a.c.y #> 1     1     1    10     2   100 #> 2     1     2    10     2   101 #> 3     1     1    10     2   102 #> 4     1     2    10     2   100 #> 5     1     1    10     2   101 #> 6     1     2    10     2   102 unnest(x, s(\"a//x\")) #>   a.b.x a.c.x #> 1     1     2 unnest(x, s(\"a//x,z\")) #>   a.b.x a.b.z a.c.x #> 1     1    10     2 unnest(x, s(\"a/2/x,y\")) #>   a.c.x a.c.y a.c.y.2 a.c.y.3 #> 1     2   100     101     102  ## stacking unnest(x, s(\"a/\", stack = TRUE)) #>   a.x a.y a.y.2 a.y.3 a.z #> 1   1   1     2    NA  10 #> 2   2 100   101   102  NA unnest(x, s(\"a/\", stack = TRUE, as = \"A\")) #>   A.x A.y A.y.2 A.y.3 A.z #> 1   1   1     2    NA  10 #> 2   2 100   101   102  NA unnest(x, s(\"a/\", stack = TRUE, as = \"A\"), stack_atomic = TRUE) #>   A.x A.y A.z #> 1   1   1  10 #> 2   1   2  10 #> 3   2 100  NA #> 4   2 101  NA #> 5   2 102  NA unnest(x, s(\"a/\", stack = \"id\"), stack_atomic = TRUE) #>   a.id a.x a.y a.z #> 1    b   1   1  10 #> 2    b   1   2  10 #> 3    c   2 100  NA #> 4    c   2 101  NA #> 5    c   2 102  NA unnest(x, s(\"a/\", stack = \"id\", as = \"\"), stack_atomic = TRUE) #>   id x   y  z #> 1  b 1   1 10 #> 2  b 1   2 10 #> 3  c 2 100 NA #> 4  c 2 101 NA #> 5  c 2 102 NA  unnest(xxx, s(stack = \"id\")) #>   a.b.x a.b.y a.b.y.2 a.b.z a.c.x a.c.y a.c.y.2 a.c.y.3 id #> 1     1     1       2    10     2   100     101     102  1 #> 2     1     1       2    10     2   100     101     102  2 #> 3     1     1       2    10     2   100     101     102  3 unnest(xxx, s(stack = \"id\"), stack_atomic = TRUE) #>    a.b.x a.b.y a.b.z a.c.x a.c.y id #> 1      1     1    10     2   100  1 #> 2      1     2    10     2   101  1 #> 3      1     1    10     2   102  1 #> 4      1     2    10     2   100  1 #> 5      1     1    10     2   101  1 #> 6      1     2    10     2   102  1 #> 7      1     1    10     2   100  2 #> 8      1     2    10     2   101  2 #> 9      1     1    10     2   102  2 #> 10     1     2    10     2   100  2 #> 11     1     1    10     2   101  2 #> 12     1     2    10     2   102  2 #> 13     1     1    10     2   100  3 #> 14     1     2    10     2   101  3 #> 15     1     1    10     2   102  3 #> 16     1     2    10     2   100  3 #> 17     1     1    10     2   101  3 #> 18     1     2    10     2   102  3 unnest(xxx, s(stack = \"id\", s(\"a/b/y/\", stack = TRUE))) #>   a.b.y id #> 1     1  1 #> 2     2  1 #> 3     1  2 #> 4     2  2 #> 5     1  3 #> 6     2  3  ## exclusion unnest(x, s(\"a/b/\", exclude = \"x\")) #>   a.b.y a.b.y.2 a.b.z #> 1     1       2    10  ## dedupe unnest(x, s(\"a\", s(\"b/y\"), s(\"b\")), stack_atomic = TRUE) #>   a.b.x a.b.y a.b.y a.b.z #> 1     1     1     1    10 #> 2     1     2     2    10 #> 3     1     1     1    10 #> 4     1     2     2    10 unnest(x, s(\"a\", s(\"b/y\"), s(\"b\")), dedupe = TRUE, stack_atomic = TRUE) #>   a.b.x a.b.y a.b.z #> 1     1     1    10 #> 2     1     2    10  ## grouping unnest(xxx, stack_atomic = TRUE,        s(stack = TRUE,          groups = list(first = s(\"a/b/x,y\"),                        second = s(\"a/b\")))) #> $first #>   a.b.x a.b.y #> 1     1     1 #> 2     1     2 #> 3     1     1 #> 4     1     2 #> 5     1     1 #> 6     1     2 #>  #> $second #>   a.b.x a.b.y a.b.z #> 1     1     1    10 #> 2     1     2    10 #> 3     1     1    10 #> 4     1     2    10 #> 5     1     1    10 #> 6     1     2    10 #>   unnest(xxx, stack_atomic = TRUE, dedupe = TRUE,        s(stack = TRUE,          groups = list(first = s(\"a/b/x,y\"),                        second = s(\"a/b\")))) #> $first #>   a.b.x a.b.y #> 1     1     1 #> 2     1     2 #> 3     1     1 #> 4     1     2 #> 5     1     1 #> 6     1     2 #>  #> $second #>   a.b.z #> 1    10 #> 2    10 #> 3    10 #>   ## processing as_is str(unnest(xxx, s(stack = \"id\",                   s(\"a/b/y\", process = \"as_is\"),                   s(\"a/c\", process = \"as_is\")))) #> 'data.frame':\t3 obs. of  3 variables: #>  $ a.b.y:List of 3 #>   ..$ : int  1 2 #>   ..$ : int  1 2 #>   ..$ : int  1 2 #>  $ a.c  :List of 3 #>   ..$ :List of 2 #>   .. ..$ x: num 2 #>   .. ..$ y: int  100 101 102 #>   ..$ :List of 2 #>   .. ..$ x: num 2 #>   .. ..$ y: int  100 101 102 #>   ..$ :List of 2 #>   .. ..$ x: num 2 #>   .. ..$ y: int  100 101 102 #>  $ id   : int  1 2 3 str(unnest(xxx, s(stack = \"id\", s(\"a/b/\", process = \"as_is\")))) #> 'data.frame':\t3 obs. of  4 variables: #>  $ a.b.x:List of 3 #>   ..$ : num 1 #>   ..$ : num 1 #>   ..$ : num 1 #>  $ a.b.y:List of 3 #>   ..$ : int  1 2 #>   ..$ : int  1 2 #>   ..$ : int  1 2 #>  $ a.b.z:List of 3 #>   ..$ : num 10 #>   ..$ : num 10 #>   ..$ : num 10 #>  $ id   : int  1 2 3 str(unnest(xxx, s(stack = \"id\", s(\"a/b\", process = \"as_is\")))) #> 'data.frame':\t3 obs. of  2 variables: #>  $ a.b:List of 3 #>   ..$ :List of 3 #>   .. ..$ x: num 1 #>   .. ..$ y: int  1 2 #>   .. ..$ z: num 10 #>   ..$ :List of 3 #>   .. ..$ x: num 1 #>   .. ..$ y: int  1 2 #>   .. ..$ z: num 10 #>   ..$ :List of 3 #>   .. ..$ x: num 1 #>   .. ..$ y: int  1 2 #>   .. ..$ z: num 10 #>  $ id : int  1 2 3  ## processing paste str(unnest(x, s(\"a/b/y\", process = \"paste\"))) #> 'data.frame':\t1 obs. of  1 variable: #>  $ a.b.y: chr \"1,2\" str(unnest(xxx, s(stack = TRUE, s(\"a/b/\", process = \"paste\")))) #> 'data.frame':\t3 obs. of  3 variables: #>  $ a.b.x: chr  \"1\" \"1\" \"1\" #>  $ a.b.y: chr  \"1,2\" \"1,2\" \"1,2\" #>  $ a.b.z: chr  \"10\" \"10\" \"10\" str(unnest(xxx, s(stack = TRUE, s(\"a/b\", process = \"paste\")))) #> 'data.frame':\t3 obs. of  1 variable: #>  $ a.b: chr  \"1,1:2,10\" \"1,1:2,10\" \"1,1:2,10\"  ## default unnest(x, s(\"a/b/c/\", s(\"b\", default = 100))) #> data frame with 0 columns and 0 rows unnest(x, s(\"a/b/c/\", stack = \"ix\", s(\"b\", default = 100))) #> data frame with 0 columns and 0 rows"},{"path":[]},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-007","dir":"Changelog","previous_headings":"","what":"Version 0.0.7","title":"Version 0.0.7","text":"CRAN release: 2025-03-18 Include <cstdint> accommodate GCC 15 Fix github actions PR #9 PR #10","code":""},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-006","dir":"Changelog","previous_headings":"","what":"Version 0.0.6","title":"Version 0.0.6","text":"CRAN release: 2024-10-19 Compile package R_NO_REMAP flag","code":""},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-005","dir":"Changelog","previous_headings":"","what":"Version 0.0.5","title":"Version 0.0.5","text":"CRAN release: 2023-12-03 Fix CRAN format compile warnings","code":""},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-004","dir":"Changelog","previous_headings":"","what":"Version 0.0.4","title":"Version 0.0.4","text":"CRAN release: 2023-01-08 Fix CRAN clang compile warnings","code":""},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-003","dir":"Changelog","previous_headings":"","what":"Version 0.0.3","title":"Version 0.0.3","text":"CRAN release: 2021-09-23 New default argument s() specification. Data frame columns now stacked default (stack_atomic = NULL parameter) New unnest() parameter process_unnamed_lists controlling processing unnamed lists.","code":""},{"path":"https://vspinu.github.io/unnest/news/index.html","id":"version-002","dir":"Changelog","previous_headings":"","what":"Version 0.0.2","title":"Version 0.0.2","text":"CRAN release: 2020-09-22 Original CRAN release","code":""}]
